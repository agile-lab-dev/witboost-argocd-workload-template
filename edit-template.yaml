apiVersion: witboost.com/v1
kind: EditTemplate
metadata:
  name: edit-argocd-workload-template.1
  title: ArgoCD Workload Edit Template
  description: Edit an ArgoCD Workload
  tags:
    - argocd
    - edit
    - workload
spec:
  owner: agilelab
  useCaseTemplateId:
    - urn:dmb:utm:argocd-template:0.0.0
  parameters:
    - title: Update Workload
      description: |
        This wizard will allow you to edit the metadata for a previously created Workload.

        Most metadata is editable but some (like the name, domain, data product etc) are not; their fields will be read-only.

        Some of the files in the component's repository cannot be updated by this wizard, namely:
        - **Documentation**: `README.md`, `docs/index.md`, etc
        - **CI/CD**: `.gitlab-ci-yaml`
        You need to take care of updating these yourself, as given their nature it's hard to do automatically and they are often edited manually after the component's creation.

    - title: Update component metadata
      description: update basic information for this component.
      required:
        - description
      properties:
        name:
          title: Name
          type: string
          description: Not editable. The name of the component.
          ui:disabled: true
        description:
          title: Description
          type: string
          description: Help others understand what this Workload is for
        domain:
          title: Domain
          type: string
          description: Not editable. Domain of the Data Product this component belongs to
          ui:field: EntityPicker
          ui:options:
            allowArbitraryValues: false
            allowedKinds:
              - Domain
          ui:disabled: true
        dataproduct:
          title: Data Product
          type: string
          description: Not editable. Data Product this component belongs to
          ui:field: EntityPicker
          ui:filter:
            - fieldName: domain
              entityPath: spec.domain
          ui:options:
            allowArbitraryValues: false
            allowedKinds:
              - System
          ui:disabled: true
        identifier:
          title: Identifier
          type: string
          description: Autogenerated from the information above. A unique identifier for the component. It will not be editable after creation and is a string composed of [a-zA-Z] separated by any of [-_].
          ui:field: ComponentIdentifierPicker
          ui:options:
            allowArbitraryValues: false
        developmentGroup:
          title: Development Group
          type: string
          description: Automatically selected from the Data Product metadata. Data Product development group.
          ui:field: EntitySelectionPicker
          ui:fieldName: dataproduct
          ui:property: spec.owner
          ui:options:
            allowArbitraryValues: false
        dependsOn:
          title: Dependencies
          type: array
          description: |
            A component could depend on other components in the same Data Product. This information will be used to deploy the components in such an order that their dependencies already exist.

            **Warning**: be careful not to select this component as its own dependency, otherwise it will become undeployable until you edit it again and remove that circular dependency.
          default: []
          items:
            type: string
            ui:field: EntityRelationsPicker
            ui:fieldName: dataproduct
            relation: hasPart
        readsFrom:
          title: Reads from
          type: array
          default: []
          items:
            type: string
            ui:field: ReadsFromPicker
          description: This is filled only for DataPipeline workloads and it represents the list of output ports or external systems that is reading
        tags:
          title: Tags
          type: array
          description: Tags for the component
          default: []
          items:
            type: string

    - title: Update ArgoCD Application source
      description: Source of the application manifests
      properties:
        path:
          title: Path
          type: string
          description: Local path inside the component folder where the manifest are located
          default: argoCD
        targetRevision:
          title: Git revision
          description: Git revision (tag/branch/commit) of the repository (eg HEAD).
          type: string
          default: HEAD

    - title: Update ArgoCD Application destination
      description: Destination cluster and namespace to deploy the application
      properties:
        server:
          title: Server
          type: string
          description: Cluster URL
          default: https://kubernetes.default.svc
        namespace:
          title: Namespace
          type: string
          default: ''
          description: Target namespace in which to deploy the manifests from source. Set it only for namespace-scoped resources

    - title: Update ArgoCD Sync policy
      properties:
        automated:
          type: boolean
          title: Automated
          default: false
      allOf:
        - if:
            properties:
              automated:
                const: true
          then:
            properties:
              prune:
                type: boolean
                title: Prune
                default: false
                description: Specifies if resources should be pruned during auto-syncing ( false by default ).
              selfHeal:
                type: boolean
                title: Self heal
                default: false
                description: Specifies if partial app sync should be executed when resources are changed only in target Kubernetes cluster and no git change detected ( false by default ).
          else:
            properties: {}

  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./edit-skeleton
        targetPath: .
        values:
          name: '${{ parameters.name }}'
          description: '${{ parameters.description }}'
          domain: '${{ parameters.domain }}'
          dataproduct: '${{ parameters.dataproduct }}'
          identifier: '${{ parameters.identifier }}'
          developmentGroup: '${{ parameters.developmentGroup }}'
          dependsOn: '${{ parameters.dependsOn }}'
          readsFrom: '${{ parameters.readsFrom }}'
          tags: '${{ parameters.tags }}'
          path: '${{ parameters.path }}'
          targetRevision: '${{ parameters.targetRevision }}'
          server: '${{ parameters.server }}'
          namespace: '${{ parameters.namespace }}'
          automated: '${{ parameters.automated }}'
          prune: '${{ parameters.prune }}'
          selfHeal: '${{ parameters.selfHeal }}'

